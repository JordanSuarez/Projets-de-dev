[{"/home/ubuntu/projet-projet-de-dev/backoffice/src/index.js":"1","/home/ubuntu/projet-projet-de-dev/backoffice/src/components/Login/OldLogin.js":"2","/home/ubuntu/projet-projet-de-dev/backoffice/src/components/Dashboard/Dashboard.js":"3","/home/ubuntu/projet-projet-de-dev/backoffice/src/components/Dashboard/authProvider.js":"4","/home/ubuntu/projet-projet-de-dev/backoffice/src/components/Dashboard/addUploadFeature.js":"5"},{"size":309,"mtime":1608297405048,"results":"6","hashOfConfig":"7"},{"size":4243,"mtime":1608297405040,"results":"8","hashOfConfig":"7"},{"size":7758,"mtime":1608400883680,"results":"9","hashOfConfig":"7"},{"size":1299,"mtime":1608400646790,"results":"10","hashOfConfig":"7"},{"size":2155,"mtime":1608301449680,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},"1bbe7k9",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"15"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"15"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"15"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"/home/ubuntu/projet-projet-de-dev/backoffice/src/index.js",["28"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Dashboard from './components/Dashboard/Dashboard';\nimport Login from './components/Login/OldLogin';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Dashboard />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n",["29","30"],"/home/ubuntu/projet-projet-de-dev/backoffice/src/components/Login/OldLogin.js",["31"],"import React, {useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { AUTH_LOGIN } from 'react-admin';\nimport { userLogin } from 'react-admin';\n\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Projets De Dev\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100vh',\n  },\n  image: {\n    backgroundImage: 'url(https://github.com/Almigra/Almigra/blob/master/projetsdedev.png?raw=true)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor: '#eeeded',\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function SignInSide() {\n  const classes = useStyles();\n  const [inputValues, setInputValues] = useState({email: '', password: ''});\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(inputValues)\n\n    userLogin(inputValues);\n  }\n\n  return (\n    <Grid container component=\"main\" className={classes.root}>\n      <CssBaseline />\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n        <div className={classes.paper}>\n          <Typography component=\"h1\" variant=\"h5\">\n            BackOffice de Projets De Dev\n          </Typography>\n          <form className={classes.form} noValidate onSubmit={handleSubmit}>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Adresse Email\"\n              name=\"email\"\n              autoComplete=\"email\"\n              autoFocus\n              value={inputValues.email}\n              onChange={(e) => setInputValues({...inputValues, email: e.target.value})}\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Mot de Passe\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n              value={inputValues.password}\n              onChange={(e) => setInputValues({...inputValues, password: e.target.value})}\n            />\n            <FormControlLabel\n              control={<Checkbox value=\"remember\" color=\"primary\" />}\n              label=\"Que mon nom résonne pour l'éternité\"\n            />\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n            >\n              LAISSEZ MOI ENTRER\n            </Button>\n            <Grid container>\n              <Grid item xs>\n                <Link href=\"#\" variant=\"body2\">\n                  J'ai osé oublier mon mot de passe\n                </Link>\n              </Grid>\n              <Grid item>\n                <Link href=\"#\" variant=\"body2\">\n                  {\"Je suis pas admin\"}\n                </Link>\n              </Grid>\n            </Grid>\n            <Box mt={5}>\n              <Copyright />\n            </Box>\n          </form>\n        </div>\n      </Grid>\n    </Grid>\n  );\n}","/home/ubuntu/projet-projet-de-dev/backoffice/src/components/Dashboard/Dashboard.js",["32","33","34","35"],"import * as React from \"react\";\nimport { Admin, Resource } from 'react-admin';\nimport simpleRestProvider from 'ra-data-json-server';\nimport { Create, Edit, SimpleForm, TextInput, ImageInput, required, List, Datagrid, SelectArrayInput, ReferenceInput , SelectInput, ArrayInput, SimpleFormIterator, ImageField, EmailField, FunctionField, UrlField, TextField, ChipField, ArrayField, SingleFieldList, EditButton, ShowButton, fetchUtils } from 'react-admin';\nimport { createMuiTheme, makeStyles } from '@material-ui/core/styles';\nimport RichTextInput from 'ra-input-rich-text';\nimport addUploadFeature from './addUploadFeature';\nimport authProvider from './authProvider';\n\n\n\n\nconst theme = createMuiTheme({\n    palette: {\n      primary: {\n        main: '#59B0DF',\n      },\n      secondary: {\n        main: '#424244',\n      },\n    },\n  });\n\n\nexport const UserList = (props) => (\n    <List {...props} bulkActionButtons={false}>\n        <Datagrid key=\"id\" >\n            <TextField label=\"ID\" source=\"id\" />\n            <TextField label=\"Nom d'utilisateur\" source=\"username\" />\n            <ImageField label=\"Photo de profile\" source=\"userImage\" />\n            <EmailField label=\"Adresse email\" source=\"email\" />\n            <EditButton />\n            <ShowButton />\n        </Datagrid>\n    </List>\n);\n\nexport const UserEdit = (props) => {\n  const PreviewImage = ({ record, source }) => {\n    if (typeof (record) == \"string\") {\n        record = {\n            [source]: record\n        }\n    }\n    return <ImageField record={record} source={source} />\n}\n  return (\n    <Edit {...props}>\n    <SimpleForm>\n        <TextInput disabled label=\"Id\" source=\"id\" />\n        <TextInput label=\"Nom d'utilisateur\" source=\"username\" />\n        <TextInput disabled label=\"Adresse email\" source=\"email\" />\n        <ImageField label=\"Image actuelle\" source=\"userImage\" />\n        <ImageInput\n                source=\"data.pictures\"\n                label=\"Nouvelle image\"\n                accept=\"image/png, image/jpg, image/jpeg\"\n                maxSize={5000000}\n                placeholder={\n                  <p>\n                    <span >\n                      Choisir une image\n                    </span>\n                    </p>\n                }\n                options={addUploadFeature}\n              >\n              <PreviewImage source=\"src\" />\n              </ImageInput>\n    </SimpleForm>\n</Edit>\n  )\n}\n\n\nconst useStyles = makeStyles({\n  tags: { \n    '& :empty' : {\n      display: 'none',\n    }\n},\n});\n\nexport const ProjectList = (props) => {\n    const classes = useStyles();\n    return(\n  <List {...props} bulkActionButtons={false}>\n      <Datagrid expand={<TextField name=\"Description\" source=\"description\" />} key=\"id\" \t>\n          <TextField label=\"ID\" source=\"id\" sortBy=\"id\" />\n        \n          <TextField label=\"Auteur\" source=\"user.username\" />\n\n          <TextField label=\"Titre\" source=\"title\" />\n          <UrlField label=\"Lien Github\" source=\"github_link\" />\n          <UrlField label=\"Lien du Projet\" source=\"project_link\" />\n          <ImageField source=\"image\" />\n          <ArrayField source=\"tags\">\n             <SingleFieldList key=\"id\">\n                 <ChipField source=\"name\" className={classes.tags}/>\n            </SingleFieldList>\n          </ArrayField>\n        <EditButton />\n        <ShowButton />\n\n\n\n      </Datagrid>\n  </List>\n)}\n\nexport const ProjectCreate = (props) => {\n  const classes = useStyles();\n  return (\n    <Create {...props}>\n    <SimpleForm>\n        <TextInput label=\"Titre\" source=\"title\" />\n        <TextInput label=\"Lien Github\" source=\"githubLink\" />\n        <TextInput label=\"Lien du Projet\" source=\"projectLink\" />\n        <ImageInput source=\"image\" />\n        <RichTextInput name=\"Description\" source=\"description\" />\n        <ArrayField source=\"tags\">\n           <SingleFieldList key=\"id\" >\n           <ChipField source=\"name\" className={classes.tags}/>\n          </SingleFieldList>\n        </ArrayField>\n    </SimpleForm>\n</Create>\n  )\n}\n\nexport const ProjectEdit = (props) => {\n\n  const classes = useStyles();\n  const PreviewImage = ({ record, source }) => {\n    console.log(typeof(record))\n    if (typeof (record) == \"object\") {\n        record = {\n            [source]: record.src,\n        }\n    }\n\n    \n    return <ImageField record={record} source={source} />\n  }\n\nreturn (\n    <Edit {...props}>\n    <SimpleForm>\n        <TextInput disabled label=\"Id\" source=\"id\" />\n        <TextInput label=\"Titre\" source=\"title\" key=\"id\" required />\n        <TextInput label=\"Lien Github\" source=\"githubLink\" />\n        <TextInput label=\"Lien du Projet\" source=\"projectLink\" />\n        <RichTextInput name=\"Description\" source=\"description\" />\n        <ImageField label=\"Image actuelle\" source=\"image\" />\n        <ImageInput\n                source=\"record.src\"\n                label=\"Nouvelle image\"\n                accept=\"image/png, image/jpg, image/jpeg\"\n                maxSize={5000000}\n                placeholder={\n                  <p>\n                    <span >\n                      Choisir une image\n                    </span>\n                    </p>\n                }\n                options={addUploadFeature}\n              >\n              <PreviewImage source=\"src\" />\n              </ImageInput>\n\n\n              <ArrayInput source=\"tags\">\n                <SimpleFormIterator disableAdd disableRemove >\n                <ReferenceInput label=\"Tags\" source=\"id\" reference=\"tags\">\n                <SelectInput optionText=\"name\" />\n                </ReferenceInput>\n                </SimpleFormIterator>\n              </ArrayInput>\n\n    </SimpleForm>\n</Edit>\n  )\n}\n\nexport const TagList = (props) => {\n    console.log(props)\n    return(\n  <List {...props} bulkActionButtons={false}>\n      <Datagrid key=\"id\" >\n          <TextField label=\"ID\" source=\"id\" />\n          <TextField label=\"Nom\" source=\"name\" />\n          <ImageField source=\"image\" />\n        <EditButton />\n\n\n\n      </Datagrid>\n  </List>\n)}\n\nexport const TagCreate = (props) => {\n  return (\n    <Create {...props}>\n    <SimpleForm>\n    <TextInput label=\"Nom\" source=\"name\" />\n    </SimpleForm>\n</Create>\n  )\n}\n\nexport const TagEdit = (props) => {\n  return (\n    <Edit {...props}>\n    <SimpleForm>\n    <TextInput label=\"Nom\" source=\"name\" />\n    </SimpleForm>\n</Edit>\n  )\n}\n\nexport const CommentList = (props) => {\n  console.log(props)\n  return(\n<List {...props} bulkActionButtons={false}>\n    <Datagrid key=\"id\" >\n        <TextField label=\"Commentaire\" source=\"content\" />\n        <TextField label=\"Auteur\" source=\"User.username\" />\n        <TextField label=\"Projet\" source=\"Project.title\" />\n      <EditButton />\n    </Datagrid>\n</List>\n)}\n\n\nexport const CommentEdit = (props) => {\n  return (\n    <Edit {...props}>\n    <SimpleForm>\n    <TextInput disabled label=\"ID\" source=\"id\" />\n    <TextInput label=\"Commentaire\" source=\"content\" />\n    <TextInput disabled label=\"Utilisateur\" source=\"User.username\" />\n    <TextInput disabled label=\"Projet\" source=\"Project.title\" />\n    </SimpleForm>\n</Edit>\n  )\n}\n\nconst httpClient = (url, options = {}) => {\n  options.user = {\n      authenticated: true,\n      token: localStorage.getItem('token')\n  };\n  return fetchUtils.fetchJson(url, options);\n};\n\nconst Dashboard = () => (\n    <Admin authProvider={authProvider} theme={theme} dataProvider={simpleRestProvider('http://ec2-34-202-164-145.compute-1.amazonaws.com/api/backOffice', httpClient)}>\n        <Resource name=\"users\" list={UserList} edit={UserEdit}/>\n        <Resource name=\"projects\" list={ProjectList} create={ProjectCreate} edit={ProjectEdit} />\n        <Resource name=\"tags\" list={TagList} create={TagCreate} edit={TagEdit}/>\n        <Resource name=\"comments\" list={CommentList} edit={CommentEdit} />\n\n    </Admin>\n);\n\nexport default Dashboard;\n","/home/ubuntu/projet-projet-de-dev/backoffice/src/components/Dashboard/authProvider.js",["36","37"],"import { AUTH_LOGIN, AUTH_LOGOUT, AUTH_ERROR, AUTH_CHECK } from 'react-admin';\n\nexport default (type, params) => {\n    if (type === AUTH_LOGIN) {\n        const { username, password } = params;\n        const values = {\n            email: username,\n            password : password\n        }\n        console.log(params)\n        const request = new Request('http://ec2-34-202-164-145.compute-1.amazonaws.com/api/users/login', {\n            credentials: 'include',\n\t    method: 'POST',\n            body: JSON.stringify( values ),\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n        })\n        return fetch(request)\n            .then(response => {\n                if (response.status < 200 || response.status >= 300) {\n                    throw new Error(response.statusText);\n                }\n                return response.json();\n            })\n            .then(({ token }) => {\n                localStorage.setItem('token', token);\n            });\n    }\n\n     if (type === AUTH_LOGOUT) {\n      localStorage.removeItem('token');\n      return Promise.resolve();\n      }\n    \n    if (type === AUTH_CHECK) {\n      return localStorage.getItem('token') ? Promise.resolve() : Promise.reject({ redirectTo: '/no-access' });\n      }\n  return Promise.reject('Unknown method');\n}\n","/home/ubuntu/projet-projet-de-dev/backoffice/src/components/Dashboard/addUploadFeature.js",[],["38","39"],{"ruleId":"40","severity":1,"message":"41","line":5,"column":8,"nodeType":"42","messageId":"43","endLine":5,"endColumn":13},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"40","severity":1,"message":"48","line":13,"column":10,"nodeType":"42","messageId":"43","endLine":13,"endColumn":20},{"ruleId":"40","severity":1,"message":"49","line":4,"column":59,"nodeType":"42","messageId":"43","endLine":4,"endColumn":67},{"ruleId":"40","severity":1,"message":"50","line":4,"column":85,"nodeType":"42","messageId":"43","endLine":4,"endColumn":101},{"ruleId":"40","severity":1,"message":"51","line":4,"column":189,"nodeType":"42","messageId":"43","endLine":4,"endColumn":202},{"ruleId":"40","severity":1,"message":"52","line":133,"column":9,"nodeType":"42","messageId":"43","endLine":133,"endColumn":16},{"ruleId":"40","severity":1,"message":"53","line":1,"column":35,"nodeType":"42","messageId":"43","endLine":1,"endColumn":45},{"ruleId":"54","severity":1,"message":"55","line":3,"column":1,"nodeType":"56","endLine":38,"endColumn":2},{"ruleId":"44","replacedBy":"57"},{"ruleId":"46","replacedBy":"58"},"no-unused-vars","'Login' is defined but never used.","Identifier","unusedVar","no-native-reassign",["59"],"no-negated-in-lhs",["60"],"'AUTH_LOGIN' is defined but never used.","'required' is defined but never used.","'SelectArrayInput' is defined but never used.","'FunctionField' is defined but never used.","'classes' is assigned a value but never used.","'AUTH_ERROR' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["59"],["60"],"no-global-assign","no-unsafe-negation"]

